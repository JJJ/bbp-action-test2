name: Sync bbPress SVN to GitHub

on:
  schedule:
    - cron: '*/15 * * * *' # Runs every 15 minutes
  workflow_dispatch: # Allows manual trigger

env:
  GITHUB_USERNAME: "jjj"
  SVN_REPO_URL: "https://bbpress.svn.wordpress.org"
  GITHUB_REPO_URL: "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/jjj/bbp-action-test2.git"

jobs:
  sync:
    runs-on: ubuntu-latest
    container:
      image: debian:bullseye
      options: --workdir /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
    steps:
      - name: Checkout GitHub Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Dependencies
        run: |
          apt-get update
          apt-get install -y git git-svn subversion jq curl

      - name: Check if GitHub Repository Has Been Synced from SVN Before
        id: check_repo
        run: |
          if [ -d "git-svn/.git" ]; then
            cd git-svn || exit 1
            if git branch -r | grep -q "origin/trunk"; then
              echo "SVN_SYNCED=true" >> $GITHUB_ENV
            else
              echo "SVN_SYNCED=false" >> $GITHUB_ENV
            fi
          else
            echo "SVN_SYNCED=false" >> $GITHUB_ENV
          fi

      - name: Get Last Synced SVN Revision
        if: env.SVN_SYNCED == 'true'
        run: |
          LAST_SYNCED_REV=$(git log --grep="git-svn-id" -1 --format="%b" | sed -n 's/.*@\([0-9]\+\) .*/\1/p' || echo "")
          echo "LAST_SYNCED_REV=$LAST_SYNCED_REV" >> $GITHUB_ENV

      - name: Get Latest SVN Revision
        run: |
          LATEST_SVN_REV=$(svn info --show-item last-changed-revision $SVN_REPO_URL)
          echo "LATEST_SVN_REV=$LATEST_SVN_REV" >> $GITHUB_ENV

      - name: Determine SVN Fetch Range
        if: env.SVN_SYNCED == 'true'
        run: |
          if [[ -z "$LAST_SYNCED_REV" ]]; then
            LAST_SYNCED_REV=$((LATEST_SVN_REV - 1000))
          fi
          if [[ "$LAST_SYNCED_REV" -lt "1" ]]; then
            LAST_SYNCED_REV=1
          fi
          echo "LAST_SYNCED_REV=$LAST_SYNCED_REV" >> $GITHUB_ENV

      - name: Check if SVN Has New Commits
        if: env.SVN_SYNCED == 'true'
        run: |
          if [[ "$LATEST_SVN_REV" -eq "$LAST_SYNCED_REV" ]]; then
            echo "No new commits in SVN. Exiting..."
            exit 0
          fi

      - name: Initialize Git-SVN (Full Clone if No Previous Sync)
        if: env.SVN_SYNCED == 'false'
        run: |
          rm -rf git-svn
          git svn clone --stdlayout --no-minimize-url --no-metadata $SVN_REPO_URL git-svn

      - name: Fetch Only New SVN Commits
        if: env.SVN_SYNCED == 'true'
        run: |
          cd git-svn
          git svn fetch --all
          git svn rebase

      - name: Get New Commit Hashes
        if: env.SVN_SYNCED == 'true'
        run: |
          cd git-svn
          LAST_SYNCED_COMMIT=$(git svn find-rev r$LAST_SYNCED_REV || git rev-list --max-parents=0 HEAD)
          NEW_COMMITS=$(git log --format="%H" $LAST_SYNCED_COMMIT..HEAD)
          echo "$NEW_COMMITS" > ../new_commits.txt

      - name: Restore Cached Username Mapping
        id: cache-authors
        uses: actions/cache@v3
        with:
          path: authors.json
          key: wp-authors-cache

      - name: Map WordPress.org Usernames to GitHub (Only New Commits)
        if: env.SVN_SYNCED == 'true'
        run: |
          cd git-svn
          if [ ! -f ../authors.json ]; then
            echo "{}" > ../authors.json
          fi
          NEW_COMMITS=$(cat ../new_commits.txt)
          AUTHORS=$(git log --format='%aN' -- $NEW_COMMITS | sort -u)
          for AUTHOR in $AUTHORS; do
            if jq -e ".\"$AUTHOR\"" ../authors.json >/dev/null; then
              continue
            fi
            WP_USERNAME=""
            for i in {1..3}; do
              WP_USERNAME=$(curl -s "https://profiles.wordpress.org/wp-json/wporg-github/v1/lookup/$AUTHOR" | jq -r '.slug' || echo "null")
              if [[ "$WP_USERNAME" != "null" ]]; then
                break
              fi
              sleep $((2 ** i))
            done
            if [[ "$WP_USERNAME" != "null" ]]; then
              jq --arg author "$AUTHOR" --arg wp_user "$WP_USERNAME" '. + {($author): $wp_user}' ../authors.json > ../authors_tmp.json && mv ../authors_tmp.json ../authors.json
            fi
          done

      - name: Save Cached Username Mapping
        uses: actions/cache@v3
        with:
          path: authors.json
          key: wp-authors-cache

      - name: Sync SVN Branches to Git
        if: env.SVN_SYNCED == 'true'
        run: |
          cd git-svn
          for branch in $(git branch -r | grep "origin/" | grep -v "trunk" | sed 's/origin\///'); do
            git branch --track "$branch" "origin/$branch" || true
            git checkout "$branch" && git svn rebase || true
          done

      - name: Sync SVN Tags to Git
        if: env.SVN_SYNCED == 'true'
        run: |
          cd git-svn
          for tag in $(git for-each-ref --format='%(refname:short)' refs/remotes/origin/tags); do
            git tag "${tag#origin/tags/}" "refs/remotes/$tag"
          done

      - name: Optimize Git Repository
        run: |
          cd git-svn
          git gc --aggressive --prune=now
          git repack -A -d --depth=250 --window=250

      - name: Push All Branches and Tags to GitHub
        if: env.SVN_SYNCED == 'true'
        run: |
          cd git-svn
          git remote add origin $GITHUB_REPO_URL || true
          git push --all origin --force
          git push --tags origin --force
